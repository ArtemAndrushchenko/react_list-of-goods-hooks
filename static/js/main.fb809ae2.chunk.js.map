{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","SORT_FIELD_EMPTY","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","SORT_FIELD_ALPHABET","localeCompare","SORT_FIELD_LENGTH","length","reverse","getPreparedGoods","className","type","cn","onClick","revers","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAyBKA,E,0EApBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAUGD,K,+BAAAA,E,2BAAAA,E,qBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,kBAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA7BR,SACEC,EADF,GAGS,IADLL,EACI,EADJA,UAAWE,EACP,EADOA,WAEPI,EAAa,YAAOD,GAmB1B,OAjBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,oBACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,kBACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EACA,CAAEI,YAAWE,eAGf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,YAAalB,IAAcL,EAASe,sBAEtCS,QAAS,kBAAMlB,EAAaN,EAASe,sBALvC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,YAAalB,IAAcL,EAASiB,oBAEtCO,QAAS,kBAAMlB,EAAaN,EAASiB,oBALvC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,aAAchB,IAEhBiB,QAAS,kBAAMhB,GAAc,SAAAiB,GAAM,OAAKA,MAL1C,sBAUEpB,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,GAAc,GACdF,EAAaN,EAASI,mBAL1B,sBAYJ,6BACGK,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC9GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fb809ae2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Goods = string[];\n\ntype SortParametrs = {\n  sortField: SortType;\n  isReversed: boolean;\n};\n\nenum SortType {\n  SORT_FIELD_ALPHABET = 'alphabet',\n  SORT_FIELD_LENGTH = 'length',\n  SORT_FIELD_EMPTY = '',\n}\n\nfunction getPreparedGoods(\n  goods:Goods,\n  { sortField, isReversed }:SortParametrs,\n):Goods {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n        case SortType.SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.SORT_FIELD_EMPTY);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            ' is-light': sortField !== SortType.SORT_FIELD_ALPHABET,\n          })}\n          onClick={() => setSortField(SortType.SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            ' is-light': sortField !== SortType.SORT_FIELD_LENGTH,\n          })}\n          onClick={() => setSortField(SortType.SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            ' is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(revers => !revers)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReversed(false);\n              setSortField(SortType.SORT_FIELD_EMPTY);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}